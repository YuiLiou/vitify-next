// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "auth.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message LoginRequest
 */
export interface LoginRequest {
  /**
   * @generated from protobuf field: string account = 1;
   */
  account: string
  /**
   * @generated from protobuf field: string password = 2;
   */
  password: string
}
/**
 * @generated from protobuf message LoginResponse
 */
export interface LoginResponse {
  /**
   * @generated from protobuf field: optional int64 id = 1;
   */
  id?: bigint
  /**
   * @generated from protobuf field: string account = 11;
   */
  account: string
  /**
   * @generated from protobuf field: optional LoginResponse.Ldap ldap = 21;
   */
  ldap?: LoginResponse_Ldap
  /**
   * @generated from protobuf field: repeated string roles = 31;
   */
  roles: string[]
  /**
   * @generated from protobuf field: string token = 41;
   */
  token: string
}
/**
 * @generated from protobuf message LoginResponse.Ldap
 */
export interface LoginResponse_Ldap {
  /**
   * @generated from protobuf field: string employee_id = 1;
   */
  employeeId: string
  /**
   * @generated from protobuf field: string name = 2;
   */
  name: string
  /**
   * @generated from protobuf field: string email = 3;
   */
  email: string
  /**
   * @generated from protobuf field: string title = 4;
   */
  title: string
  /**
   * @generated from protobuf field: string department = 5;
   */
  department: string
}
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
  constructor() {
    super('LoginRequest', [
      { no: 1, name: 'account', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<LoginRequest>): LoginRequest {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.account = ''
    message.password = ''
    if (value !== undefined)
      reflectionMergePartial<LoginRequest>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LoginRequest,
  ): LoginRequest {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string account */ 1:
          message.account = reader.string()
          break
        case /* string password */ 2:
          message.password = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: LoginRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string account = 1; */
    if (message.account !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.account)
    /* string password = 2; */
    if (message.password !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.password)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message LoginRequest
 */
export const LoginRequest = new LoginRequest$Type()
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
  constructor() {
    super('LoginResponse', [
      {
        no: 1,
        name: 'id',
        kind: 'scalar',
        opt: true,
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 11, name: 'account', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 21, name: 'ldap', kind: 'message', T: () => LoginResponse_Ldap },
      {
        no: 31,
        name: 'roles',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 41, name: 'token', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<LoginResponse>): LoginResponse {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.account = ''
    message.roles = []
    message.token = ''
    if (value !== undefined)
      reflectionMergePartial<LoginResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LoginResponse,
  ): LoginResponse {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* optional int64 id */ 1:
          message.id = reader.int64().toBigInt()
          break
        case /* string account */ 11:
          message.account = reader.string()
          break
        case /* optional LoginResponse.Ldap ldap */ 21:
          message.ldap = LoginResponse_Ldap.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.ldap,
          )
          break
        case /* repeated string roles */ 31:
          message.roles.push(reader.string())
          break
        case /* string token */ 41:
          message.token = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: LoginResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional int64 id = 1; */
    if (message.id !== undefined)
      writer.tag(1, WireType.Varint).int64(message.id)
    /* string account = 11; */
    if (message.account !== '')
      writer.tag(11, WireType.LengthDelimited).string(message.account)
    /* optional LoginResponse.Ldap ldap = 21; */
    if (message.ldap)
      LoginResponse_Ldap.internalBinaryWrite(
        message.ldap,
        writer.tag(21, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated string roles = 31; */
    for (let i = 0; i < message.roles.length; i++)
      writer.tag(31, WireType.LengthDelimited).string(message.roles[i])
    /* string token = 41; */
    if (message.token !== '')
      writer.tag(41, WireType.LengthDelimited).string(message.token)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message LoginResponse
 */
export const LoginResponse = new LoginResponse$Type()
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse_Ldap$Type extends MessageType<LoginResponse_Ldap> {
  constructor() {
    super('LoginResponse.Ldap', [
      {
        no: 1,
        name: 'employee_id',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'title', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'department', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<LoginResponse_Ldap>): LoginResponse_Ldap {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.employeeId = ''
    message.name = ''
    message.email = ''
    message.title = ''
    message.department = ''
    if (value !== undefined)
      reflectionMergePartial<LoginResponse_Ldap>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LoginResponse_Ldap,
  ): LoginResponse_Ldap {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string employee_id */ 1:
          message.employeeId = reader.string()
          break
        case /* string name */ 2:
          message.name = reader.string()
          break
        case /* string email */ 3:
          message.email = reader.string()
          break
        case /* string title */ 4:
          message.title = reader.string()
          break
        case /* string department */ 5:
          message.department = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: LoginResponse_Ldap,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string employee_id = 1; */
    if (message.employeeId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.employeeId)
    /* string name = 2; */
    if (message.name !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.name)
    /* string email = 3; */
    if (message.email !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.email)
    /* string title = 4; */
    if (message.title !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.title)
    /* string department = 5; */
    if (message.department !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.department)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message LoginResponse.Ldap
 */
export const LoginResponse_Ldap = new LoginResponse_Ldap$Type()
/**
 * @generated ServiceType for protobuf service AuthService
 */
export const AuthService = new ServiceType(
  'AuthService',
  [{ name: 'Login', options: {}, I: LoginRequest, O: LoginResponse }],
  { 'google.api.default_host': 'lynx.phison.com' },
)
